syntax = "proto3";

package nc;

// NetworkController is the server to be implemeted by the network-controller.
service NetworkController {
	// HandleRXInfo publishes rx related meta-data.
	rpc HandleRXInfo(HandleRXInfoRequest) returns (HandleRXInfoResponse) {}

	// HandleDataUpMACCommand publishes a mac-command received by an end-device.
	// This method will only be called in case the mac-command request was
	// enqueued throught the API or when the CID is >= 0x80 (proprietary
	// mac-command range).
	rpc HandleDataUpMACCommand(HandleDataUpMACCommandRequest) returns (HandleDataUpMACCommandResponse) {}
}

message DataRate {
	string modulation = 1;
	uint32 bandWidth = 2;
	uint32 spreadFactor = 3;
	uint32 bitrate = 4;
}

message RXInfo {
	bytes mac = 1;
	string time = 2;
	int32 rssi = 3;
	double loRaSNR = 4;
}

message TXInfo {
	int64 frequency = 1;
	DataRate dataRate = 2;
	bool adr = 3;
	string codeRate = 4;
}

message HandleRXInfoRequest {
	bytes devEUI = 1;
	TXInfo txInfo = 3;
	repeated RXInfo rxInfo = 4;
}

message HandleRXInfoResponse {}

message HandleDataUpMACCommandRequest {
	// DevEUI of the node.
	bytes devEUI = 1;

	// MAC-command was received in the FRMPayload field.
	bool frmPayload = 3;

	// Command identifier (specified by the LoRaWAN specs).
	uint32 cid = 5;

	// MAC-command payload(s).
	repeated bytes commands = 6;
}

message HandleDataUpMACCommandResponse {}

message HandleErrorRequest {
	bytes devEUI = 1;
	string error = 3;
}

message HandleErrorResponse {}
