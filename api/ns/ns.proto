syntax = "proto3";

package ns;

// NetworkServer is the network-server service.
service NetworkServer {
	// CreateNodeSession creates the given node-session.
	// The DevAddr must contain the same NwkID as the configured NetID.
	// Node-sessions will expire automatically after the configured TTL.
	rpc CreateNodeSession(CreateNodeSessionRequest) returns (CreateNodeSessionResponse) {}

	// GetNodeSession returns the node-session matching the given DevEUI.
	rpc GetNodeSession(GetNodeSessionRequest) returns (GetNodeSessionResponse) {}

	// UpdateNodeSession updates the given node-session.
	rpc UpdateNodeSession(UpdateNodeSessionRequest) returns (UpdateNodeSessionResponse) {}

	// DeleteNodeSession deletes the node-session matching the given DevAddr.
	rpc DeleteNodeSession(DeleteNodeSessionRequest) returns (DeleteNodeSessionResponse) {}

	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	rpc GetRandomDevAddr(GetRandomDevAddrRequest) returns (GetRandomDevAddrResponse) {}

	// EnqueueDataDownMACCommand adds the downlink mac-command to the queue.
	rpc EnqueueDataDownMACCommand(EnqueueDataDownMACCommandRequest) returns (EnqueueDataDownMACCommandResponse) {}

	// PushDataDown pushes the given downlink payload to the node (only works for Class-C nodes).
	rpc PushDataDown(PushDataDownRequest) returns (PushDataDownResponse) {}

	// CreateGateway creates the given gateway.
	rpc CreateGateway(CreateGatewayRequest) returns (CreateGatewayResponse) {}

	// GetGateway returns data for a particular gateway.
	rpc GetGateway(GetGatewayRequest) returns (GetGatewayResponse) {}

	// UpdateGateway updates an existing gateway.
	rpc UpdateGateway(UpdateGatewayRequest) returns (UpdateGatewayResponse) {}

	// ListGateways returns the existing gateways.
	rpc ListGateways(ListGatewayRequest) returns (ListGatewayResponse) {}

	// DeleteGateway deletes a gateway.
	rpc DeleteGateway(DeleteGatewayRequest) returns (DeleteGatewayResponse) {}

	// GetGatewayStats returns stats of an existing gateway.
	rpc GetGatewayStats(GetGatewayStatsRequest) returns (GetGatewayStatsResponse) {}
}

enum RXWindow {
	// Receive window 1
	RX1 = 0;

	// Receive window 2
	RX2 = 1;
}

message CreateNodeSessionRequest {
	// The address of the device (4 bytes).
	bytes devAddr = 1;

	// The application EUI (8 bytes).
	bytes appEUI = 2;

	// The device EUI (8 bytes).
	bytes devEUI = 3;

	// The network-session key (16 bytes).
	bytes nwkSKey = 4;

	// The next expected uplink frame-counter.
	uint32 fCntUp = 5;

	// The frame-counter used for the next downlink frame.
	uint32 fCntDown = 6;

	// the RX delay value (0 = 1 sec, 1 = 1 sec, 2 = 2 sec ...).
	uint32 rxDelay = 7;

	// The data-rate offset used for RX1 (see LoRaWAN specs for valid values).
	uint32 rx1DROffset = 8;

	// The custom channel frequency list (this is not supported for every
	// ISM band, see the LoRaWAN specs for more information).
	repeated uint32 cFList = 9;

	// The RX window to use for downlink transmissions.
	RXWindow rxWindow = 10;

	// The data-rate to use for RX2 transmissions.
	uint32 rx2DR = 11;

	// Use relax frame-counter mode for ABP devices (this is insecure!).
	bool relaxFCnt = 12;

	// The interval (based on frame-counter) on which to calculate the ideal
	// data-rate and tx-power of the node and if needed, request an adaption.
	uint32 adrInterval = 13;

	// The installation margin to take into account when calculating the ideal
	// data-rate and tx-power. The default recommended value is 5dB.
	double installationMargin = 14;
}

message CreateNodeSessionResponse {}

message GetNodeSessionRequest {
	bytes devEUI = 1;
}

message GetNodeSessionResponse {
	// The address of the device (4 bytes).
	bytes devAddr = 1;

	// The application EUI (8 bytes).
	bytes appEUI = 2;

	// The device EUI (8 bytes).
	bytes devEUI = 3;

	// The network-session key (16 bytes).
	bytes nwkSKey = 4;

	// The next expected uplink frame-counter.
	uint32 fCntUp = 5;

	// The frame-counter used for the next downlink frame.
	uint32 fCntDown = 6;

	// the RX delay value (0 = 1 sec, 1 = 1 sec, 2 = 2 sec ...).
	uint32 rxDelay = 7;

	// The data-rate offset used for RX1 (see LoRaWAN specs for valid values).
	uint32 rx1DROffset = 8;

	// The custom channel frequency list (this is not supported for every
	// ISM band, see the LoRaWAN specs for more information).
	repeated uint32 cFList = 9;

	// The RX window to use for downlink transmissions.
	RXWindow rxWindow = 10;

	// The data-rate to use for RX2 transmissions.
	uint32 rx2DR = 11;

	// Use relax frame-counter mode for ABP devices (this is insecure!).
	bool relaxFCnt = 12;

	// The interval (based on frame-counter) on which to calculate the ideal
	// data-rate and tx-power of the node and if needed, request an adaption.
	uint32 adrInterval = 13;

	// The installation margin to take into account when calculating the ideal
	// data-rate and tx-power. The default recommended value is 5dB.
	double installationMargin = 14;

	// The number of times the node should re-transmit an uplink frame.
	// This is controlled by the ADR engine.
	uint32 nbTrans = 15;

	// The TX power of the node. This is controlled by the ADR engine.
	uint32 txPower = 16;

}

message UpdateNodeSessionRequest {
	// The address of the device (4 bytes).
	bytes devAddr = 1;

	// The application EUI (8 bytes).
	bytes appEUI = 2;

	// The device EUI (8 bytes).
	bytes devEUI = 3;

	// The network-session key (16 bytes).
	bytes nwkSKey = 4;

	// The next expected uplink frame-counter.
	uint32 fCntUp = 5;

	// The frame-counter used for the next downlink frame.
	uint32 fCntDown = 6;

	// the RX delay value (0 = 1 sec, 1 = 1 sec, 2 = 2 sec ...).
	uint32 rxDelay = 7;

	// The data-rate offset used for RX1 (see LoRaWAN specs for valid values).
	uint32 rx1DROffset = 8;

	// The custom channel frequency list (this is not supported for every
	// ISM band, see the LoRaWAN specs for more information).
	repeated uint32 cFList = 9;

	// The RX window to use for downlink transmissions.
	RXWindow rxWindow = 10;

	// The data-rate to use for RX2 transmissions.
	uint32 rx2DR = 11;

	// Use relax frame-counter mode for ABP devices (this is insecure!).
	bool relaxFCnt = 12;

	// The interval (based on frame-counter) on which to calculate the ideal
	// data-rate and tx-power of the node and if needed, request an adaption.
	uint32 adrInterval = 13;

	// The installation margin to take into account when calculating the ideal
	// data-rate and tx-power. The default recommended value is 5dB.
	double installationMargin = 14;
}

message UpdateNodeSessionResponse {}

message DeleteNodeSessionRequest {
	bytes devEUI = 1;
}

message DeleteNodeSessionResponse {}

message GetRandomDevAddrRequest {}

message GetRandomDevAddrResponse {
	bytes devAddr = 1;
}

message EnqueueDataDownMACCommandRequest {
	bytes devEUI = 1;
	bool frmPayload = 2;
	bytes data = 3;
}

message EnqueueDataDownMACCommandResponse {}

message PushDataDownRequest {
	// DevEUI of the node to which to push the data.
	bytes devEUI = 1;

	// Data (encrypted with the AppSKey) to push to the node.
	bytes data = 2;

	// Payload must be acknowledged by the node.
	bool confirmed = 3;

	// FPort to use for transmitting the payload.
	uint32 fPort = 4;

	// FCnt used for encrypting the data. When this does not match the FCntDown
	// of the network-server, an error is returned.
	uint32 fCnt = 5;
}

message PushDataDownResponse {}

message CreateGatewayRequest {
	// MAC address of the gateway.
	bytes mac = 1;

	// Name of the gateway.
	string name = 2;

	// Description for the gateway.
	string description = 3;

	// Latitude of the gateway.
	double latitude = 4;

	// Longitude of the gateway.
	double longitude = 5;

	// Altitude of the gateway.
	double altitude = 6;
}

message CreateGatewayResponse {}

message GetGatewayRequest {
	// MAC address of the gateway.
	bytes mac = 1;
}

message GetGatewayResponse {
	// MAC address of the gateway.
	bytes mac = 1;

	// Name of the gateway.
	string name = 2;

	// Description for the gateway.
	string description = 3;

	// Latitude of the gateway.
	double latitude = 4;

	// Longitude of the gateway.
	double longitude = 5;

	// Altitude of the gateway.
	double altitude = 6;

	// The timestamp when the gateway was created.
	string createdAt = 7;

	// The timestamp when the gateway was last updated.
	string updatedAt = 8;

	// The timestamp when the gateway was first seen.
	string firstSeenAt = 9;

	// The timestamp when the gateway was last seen.
	string lastSeenAt = 10;
}

message UpdateGatewayRequest {
	// MAC address of the gateway.
	bytes mac = 1;

	// Name of the gateway.
	string name = 2;

	// Description for the gateway.
	string description = 3;

	// Latitude of the gateway.
	double latitude = 4;

	// Longitude of the gateway.
	double longitude = 5;

	// Altitude of the gateway.
	double altitude = 6;
}

message UpdateGatewayResponse {}

message ListGatewayRequest {
	// Max number of gateways to return in the result-set.
	int32 limit = 1;

	// Offset in the result-set (for pagination).
	int32 offset = 2;
}

message ListGatewayResponse {
	// Total number of gateways.
	int32 totalCount = 1;

	// Result-set.
	repeated GetGatewayResponse result = 2;
}

message DeleteGatewayRequest {
	// MAC address of the gateway.
	bytes mac = 1;
}

message DeleteGatewayResponse {}

enum AggregationInterval {
	SECOND = 0;
	MINUTE = 1;
	HOUR = 2;
	DAY = 3;
	WEEK = 4;
	MONTH = 5;
	QUARTER = 6;
	YEAR = 7;
}

message GatewayStats {
	// Timestamp of the (aggregated) measurement.
	string timestamp = 1;

	// Packets received by the gateway.
	int32 rxPacketsReceived = 2;

	// Packets received by the gateway that passed the CRC check.
	int32 rxPacketsReceivedOK = 3;

	// Packets received by the gateway for transmission.
	int32 txPacketsReceived = 4;

	// Packets transmitted by the gateway.
	int32 txPacketsEmitted = 5;
}

message GetGatewayStatsRequest {
	// MAC address of the gateway.
	bytes mac = 1;

	// Aggregation interval.
	AggregationInterval interval = 2;

	// Timestamp to start from.
	string startTimestamp = 3;

	// Timestamp until to get from.
	string endTimestamp = 4;
}

message GetGatewayStatsResponse {
	repeated GatewayStats result = 1;
}
