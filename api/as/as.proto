syntax = "proto3";

package as;

import "google/protobuf/empty.proto";
import "github.com/brocaar/loraserver/api/gw/gw.proto";

// ApplicationServerService is the service providing the application-server interface.
service ApplicationServerService {
    // HandleUplinkData handles uplink data received from an end-device.
    rpc HandleUplinkData(HandleUplinkDataRequest) returns (google.protobuf.Empty) {}

    // HandleProprietaryUplink handles proprietary uplink payloads.
    rpc HandleProprietaryUplink(HandleProprietaryUplinkRequest) returns (google.protobuf.Empty) {}

    // HandleError handles an error message.
    rpc HandleError(HandleErrorRequest) returns (google.protobuf.Empty) {}

    // HandleDownlinkACK handles a downlink ACK or nACK response.
    rpc HandleDownlinkACK(HandleDownlinkACKRequest) returns (google.protobuf.Empty) {}

    // SetDeviceStatus updates the device-status for a device.
    rpc SetDeviceStatus(SetDeviceStatusRequest) returns (google.protobuf.Empty) {}
}

enum RXWindow {
    RX1 = 0;
    RX2 = 1;
}

enum ErrorType {
    GENERIC = 0;
    OTAA = 1;
    DATA_UP_FCNT = 2;
    DATA_UP_MIC = 3;
    DEVICE_QUEUE_ITEM_SIZE = 4;
    DEVICE_QUEUE_ITEM_FCNT = 5;
}


message HandleUplinkDataRequest {
    // DevEUI EUI (8 bytes).
    bytes dev_eui = 1;

    // Join EUI used for OTAA activation (8 bytes).
    bytes join_eui = 2;

    // Frame-counter.
    uint32 f_cnt = 3;

    // Frame port.
    uint32 f_port = 4;

    // ADR enabled.
    bool adr = 5;

    // Data-rate.
    uint32 dr = 6;

    // TX meta-data.
    gw.UplinkTXInfo tx_info = 7;

    // RX meta-data.
    repeated gw.UplinkRXInfo rx_info = 8;

    // Received data (encrypted).
    bytes data = 9;
}

message HandleProprietaryUplinkRequest {
    // MACPayload of the proprietary LoRaWAN frame.
    bytes mac_payload = 1;

    // MIC of the proprietary LoRaWAN frame.
    bytes mic = 2;

    // TXInfo contains the TX related meta-data.
    gw.UplinkTXInfo tx_info = 3;

    // RXInfo contains the RX related meta-data.
    repeated gw.UplinkRXInfo rx_info = 4;
}

message HandleErrorRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // Type of the error.
    ErrorType type = 3;

    // Error string describing the error.
    string error = 4;

    // Frame-counter (if applicable) related to the error.
    uint32 f_cnt = 5;
}

message HandleDownlinkACKRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // Downlink frame-counter.
    uint32 f_cnt = 2;

    // Frame was acknowledged?
    bool acknowledged = 3;
}

message SetDeviceStatusRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // Battery level.
    // 0:      The end-device is connected to an external power source
    // 1..254: The battery level, 1 being at minimum and 254 being at maximum
    // 255:    The end-device was not able to measure the battery level
    // 256:    The device-status is not available.
    uint32 battery = 2;

    // The device margin status
    // -32..32: The demodulation SNR ration in dB
    // 256:     The device-status is not available.
    int32  margin = 3;
}
