syntax = "proto3";

package as;

// ApplicationServer is the server to be implemented by the application server.
service ApplicationServer {
    // HandleUplinkData publishes data received from an end-device.
    rpc HandleUplinkData(HandleUplinkDataRequest) returns (HandleUplinkDataResponse) {}

    // HandleProprietaryUplink handles proprietary uplink payloads.
    rpc HandleProprietaryUplink(HandleProprietaryUplinkRequest) returns (HandleProprietaryUplinkResponse) {}

    // HandleError publishes an error message.
    rpc HandleError(HandleErrorRequest) returns (HandleErrorResponse) {}

    // HandleDownlinkACK sends a downlink ACK or nACK response.
    rpc HandleDownlinkACK(HandleDownlinkACKRequest) returns (HandleDownlinkACKResponse) {}
}

enum RXWindow {
    RX1 = 0;
    RX2 = 1;
}

enum ErrorType {
    Generic = 0;
    OTAA = 1;
    DATA_UP_FCNT = 2;
    DATA_UP_MIC = 3;
    DEVICE_QUEUE_ITEM_SIZE = 4;
    DEVICE_QUEUE_ITEM_FCNT = 5;
}

message DataRate {
    string modulation = 1;
    uint32 bandWidth = 2;
    uint32 spreadFactor = 3;
    uint32 bitrate = 4;
}

message RXInfo {
    bytes mac = 1;
    string time = 2;
    int32 rssi = 3;
    double loRaSNR = 4;
    string name = 5;
    double latitude = 6;
    double longitude = 7;
    double altitude = 8;
}

message TXInfo {
    int64 frequency = 1;
    DataRate dataRate = 2;
    bool adr = 3;
    string codeRate = 4;
}

message HandleUplinkDataRequest {
    bytes devEUI = 1;
    bytes appEUI = 2;
    uint32 fCnt = 3;
    uint32 fPort = 4;
    bytes data = 5;
    TXInfo txInfo = 6;
    repeated RXInfo rxInfo = 7;

    // The device battery status
    // 0:      The end-device is connected to an external power source
    // 1..254: The battery level, 1 being at minimum and 254 being at maximum
    // 255:    The end-device was not able to measure the battery level
    // 256:    The device-status is not available.
    uint32 deviceStatusBattery = 9;

    // The device margin status
    // -32..32: The demodulation SNR ration in dB
    // 256:     The device-status is not available.
    int32  deviceStatusMargin = 10;
}

message HandleProprietaryUplinkRequest {
    // MACPayload of the proprietary LoRaWAN frame.
    bytes macPayload = 1;

    // MIC of the proprietary LoRaWAN frame.
    bytes mic = 2;

    // TXInfo contains the TX related meta-data.
    TXInfo txInfo = 3;

    // RXInfo contains the RX related meta-data.
    repeated RXInfo rxInfo = 4;
}

message HandleProprietaryUplinkResponse {}

message HandleUplinkDataResponse {}

message HandleErrorRequest {
    // DevEUI of the device.
    bytes devEUI = 1;

    // Type of the error.
    ErrorType type = 3;

    // Error string describing the error.
    string error = 4;

    // Frame-counter (if applicable) related to the error.
    uint32 fCnt = 5;
}

message HandleErrorResponse {}

message HandleDownlinkACKRequest {
    // DevEUI of the device.
    bytes devEUI = 1;

    // Downlink frame-counter.
    uint32 fCnt = 2;

    // Frame was acknowledged?
    bool acknowledged = 3;
}

message HandleDownlinkACKResponse {}