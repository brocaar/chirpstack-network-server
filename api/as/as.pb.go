// Code generated by protoc-gen-go. DO NOT EDIT.
// source: as.proto

/*
Package as is a generated protocol buffer package.

It is generated from these files:
	as.proto

It has these top-level messages:
	DataRate
	RXInfo
	TXInfo
	HandleUplinkDataRequest
	HandleProprietaryUplinkRequest
	HandleProprietaryUplinkResponse
	HandleUplinkDataResponse
	HandleErrorRequest
	HandleErrorResponse
	HandleDownlinkACKRequest
	HandleDownlinkACKResponse
*/
package as

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RXWindow int32

const (
	RXWindow_RX1 RXWindow = 0
	RXWindow_RX2 RXWindow = 1
)

var RXWindow_name = map[int32]string{
	0: "RX1",
	1: "RX2",
}
var RXWindow_value = map[string]int32{
	"RX1": 0,
	"RX2": 1,
}

func (x RXWindow) String() string {
	return proto.EnumName(RXWindow_name, int32(x))
}
func (RXWindow) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ErrorType int32

const (
	ErrorType_Generic                ErrorType = 0
	ErrorType_OTAA                   ErrorType = 1
	ErrorType_DATA_UP_FCNT           ErrorType = 2
	ErrorType_DATA_UP_MIC            ErrorType = 3
	ErrorType_DEVICE_QUEUE_ITEM_SIZE ErrorType = 4
	ErrorType_DEVICE_QUEUE_ITEM_FCNT ErrorType = 5
)

var ErrorType_name = map[int32]string{
	0: "Generic",
	1: "OTAA",
	2: "DATA_UP_FCNT",
	3: "DATA_UP_MIC",
	4: "DEVICE_QUEUE_ITEM_SIZE",
	5: "DEVICE_QUEUE_ITEM_FCNT",
}
var ErrorType_value = map[string]int32{
	"Generic":                0,
	"OTAA":                   1,
	"DATA_UP_FCNT":           2,
	"DATA_UP_MIC":            3,
	"DEVICE_QUEUE_ITEM_SIZE": 4,
	"DEVICE_QUEUE_ITEM_FCNT": 5,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DataRate struct {
	Modulation   string `protobuf:"bytes,1,opt,name=modulation" json:"modulation,omitempty"`
	BandWidth    uint32 `protobuf:"varint,2,opt,name=bandWidth" json:"bandWidth,omitempty"`
	SpreadFactor uint32 `protobuf:"varint,3,opt,name=spreadFactor" json:"spreadFactor,omitempty"`
	Bitrate      uint32 `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
}

func (m *DataRate) Reset()                    { *m = DataRate{} }
func (m *DataRate) String() string            { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()               {}
func (*DataRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataRate) GetModulation() string {
	if m != nil {
		return m.Modulation
	}
	return ""
}

func (m *DataRate) GetBandWidth() uint32 {
	if m != nil {
		return m.BandWidth
	}
	return 0
}

func (m *DataRate) GetSpreadFactor() uint32 {
	if m != nil {
		return m.SpreadFactor
	}
	return 0
}

func (m *DataRate) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type RXInfo struct {
	Mac       []byte  `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Time      string  `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Rssi      int32   `protobuf:"varint,3,opt,name=rssi" json:"rssi,omitempty"`
	LoRaSNR   float64 `protobuf:"fixed64,4,opt,name=loRaSNR" json:"loRaSNR,omitempty"`
	Name      string  `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Latitude  float64 `protobuf:"fixed64,6,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,7,opt,name=longitude" json:"longitude,omitempty"`
	Altitude  float64 `protobuf:"fixed64,8,opt,name=altitude" json:"altitude,omitempty"`
}

func (m *RXInfo) Reset()                    { *m = RXInfo{} }
func (m *RXInfo) String() string            { return proto.CompactTextString(m) }
func (*RXInfo) ProtoMessage()               {}
func (*RXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RXInfo) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *RXInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *RXInfo) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *RXInfo) GetLoRaSNR() float64 {
	if m != nil {
		return m.LoRaSNR
	}
	return 0
}

func (m *RXInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RXInfo) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *RXInfo) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *RXInfo) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

type TXInfo struct {
	Frequency int64     `protobuf:"varint,1,opt,name=frequency" json:"frequency,omitempty"`
	DataRate  *DataRate `protobuf:"bytes,2,opt,name=dataRate" json:"dataRate,omitempty"`
	Adr       bool      `protobuf:"varint,3,opt,name=adr" json:"adr,omitempty"`
	CodeRate  string    `protobuf:"bytes,4,opt,name=codeRate" json:"codeRate,omitempty"`
}

func (m *TXInfo) Reset()                    { *m = TXInfo{} }
func (m *TXInfo) String() string            { return proto.CompactTextString(m) }
func (*TXInfo) ProtoMessage()               {}
func (*TXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TXInfo) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *TXInfo) GetAdr() bool {
	if m != nil {
		return m.Adr
	}
	return false
}

func (m *TXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

type HandleUplinkDataRequest struct {
	DevEUI []byte    `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	AppEUI []byte    `protobuf:"bytes,2,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	FCnt   uint32    `protobuf:"varint,3,opt,name=fCnt" json:"fCnt,omitempty"`
	FPort  uint32    `protobuf:"varint,4,opt,name=fPort" json:"fPort,omitempty"`
	Data   []byte    `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	TxInfo *TXInfo   `protobuf:"bytes,6,opt,name=txInfo" json:"txInfo,omitempty"`
	RxInfo []*RXInfo `protobuf:"bytes,7,rep,name=rxInfo" json:"rxInfo,omitempty"`
	// The device battery status
	// 0:      The end-device is connected to an external power source
	// 1..254: The battery level, 1 being at minimum and 254 being at maximum
	// 255:    The end-device was not able to measure the battery level
	// 256:    The device-status is not available.
	DeviceStatusBattery uint32 `protobuf:"varint,9,opt,name=deviceStatusBattery" json:"deviceStatusBattery,omitempty"`
	// The device margin status
	// -32..32: The demodulation SNR ration in dB
	// 256:     The device-status is not available.
	DeviceStatusMargin int32 `protobuf:"varint,10,opt,name=deviceStatusMargin" json:"deviceStatusMargin,omitempty"`
}

func (m *HandleUplinkDataRequest) Reset()                    { *m = HandleUplinkDataRequest{} }
func (m *HandleUplinkDataRequest) String() string            { return proto.CompactTextString(m) }
func (*HandleUplinkDataRequest) ProtoMessage()               {}
func (*HandleUplinkDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HandleUplinkDataRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *HandleUplinkDataRequest) GetAppEUI() []byte {
	if m != nil {
		return m.AppEUI
	}
	return nil
}

func (m *HandleUplinkDataRequest) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *HandleUplinkDataRequest) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *HandleUplinkDataRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *HandleUplinkDataRequest) GetTxInfo() *TXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *HandleUplinkDataRequest) GetRxInfo() []*RXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

func (m *HandleUplinkDataRequest) GetDeviceStatusBattery() uint32 {
	if m != nil {
		return m.DeviceStatusBattery
	}
	return 0
}

func (m *HandleUplinkDataRequest) GetDeviceStatusMargin() int32 {
	if m != nil {
		return m.DeviceStatusMargin
	}
	return 0
}

type HandleProprietaryUplinkRequest struct {
	// MACPayload of the proprietary LoRaWAN frame.
	MacPayload []byte `protobuf:"bytes,1,opt,name=macPayload,proto3" json:"macPayload,omitempty"`
	// MIC of the proprietary LoRaWAN frame.
	Mic []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// TXInfo contains the TX related meta-data.
	TxInfo *TXInfo `protobuf:"bytes,3,opt,name=txInfo" json:"txInfo,omitempty"`
	// RXInfo contains the RX related meta-data.
	RxInfo []*RXInfo `protobuf:"bytes,4,rep,name=rxInfo" json:"rxInfo,omitempty"`
}

func (m *HandleProprietaryUplinkRequest) Reset()                    { *m = HandleProprietaryUplinkRequest{} }
func (m *HandleProprietaryUplinkRequest) String() string            { return proto.CompactTextString(m) }
func (*HandleProprietaryUplinkRequest) ProtoMessage()               {}
func (*HandleProprietaryUplinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HandleProprietaryUplinkRequest) GetMacPayload() []byte {
	if m != nil {
		return m.MacPayload
	}
	return nil
}

func (m *HandleProprietaryUplinkRequest) GetMic() []byte {
	if m != nil {
		return m.Mic
	}
	return nil
}

func (m *HandleProprietaryUplinkRequest) GetTxInfo() *TXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *HandleProprietaryUplinkRequest) GetRxInfo() []*RXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

type HandleProprietaryUplinkResponse struct {
}

func (m *HandleProprietaryUplinkResponse) Reset()                    { *m = HandleProprietaryUplinkResponse{} }
func (m *HandleProprietaryUplinkResponse) String() string            { return proto.CompactTextString(m) }
func (*HandleProprietaryUplinkResponse) ProtoMessage()               {}
func (*HandleProprietaryUplinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type HandleUplinkDataResponse struct {
}

func (m *HandleUplinkDataResponse) Reset()                    { *m = HandleUplinkDataResponse{} }
func (m *HandleUplinkDataResponse) String() string            { return proto.CompactTextString(m) }
func (*HandleUplinkDataResponse) ProtoMessage()               {}
func (*HandleUplinkDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type HandleErrorRequest struct {
	// DevEUI of the device.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// Type of the error.
	Type ErrorType `protobuf:"varint,3,opt,name=type,enum=as.ErrorType" json:"type,omitempty"`
	// Error string describing the error.
	Error string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	// Frame-counter (if applicable) related to the error.
	FCnt uint32 `protobuf:"varint,5,opt,name=fCnt" json:"fCnt,omitempty"`
}

func (m *HandleErrorRequest) Reset()                    { *m = HandleErrorRequest{} }
func (m *HandleErrorRequest) String() string            { return proto.CompactTextString(m) }
func (*HandleErrorRequest) ProtoMessage()               {}
func (*HandleErrorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HandleErrorRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *HandleErrorRequest) GetType() ErrorType {
	if m != nil {
		return m.Type
	}
	return ErrorType_Generic
}

func (m *HandleErrorRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HandleErrorRequest) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type HandleErrorResponse struct {
}

func (m *HandleErrorResponse) Reset()                    { *m = HandleErrorResponse{} }
func (m *HandleErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*HandleErrorResponse) ProtoMessage()               {}
func (*HandleErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type HandleDownlinkACKRequest struct {
	// DevEUI of the device.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// Downlink frame-counter.
	FCnt uint32 `protobuf:"varint,2,opt,name=fCnt" json:"fCnt,omitempty"`
	// Frame was acknowledged?
	Acknowledged bool `protobuf:"varint,3,opt,name=acknowledged" json:"acknowledged,omitempty"`
}

func (m *HandleDownlinkACKRequest) Reset()                    { *m = HandleDownlinkACKRequest{} }
func (m *HandleDownlinkACKRequest) String() string            { return proto.CompactTextString(m) }
func (*HandleDownlinkACKRequest) ProtoMessage()               {}
func (*HandleDownlinkACKRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HandleDownlinkACKRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *HandleDownlinkACKRequest) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *HandleDownlinkACKRequest) GetAcknowledged() bool {
	if m != nil {
		return m.Acknowledged
	}
	return false
}

type HandleDownlinkACKResponse struct {
}

func (m *HandleDownlinkACKResponse) Reset()                    { *m = HandleDownlinkACKResponse{} }
func (m *HandleDownlinkACKResponse) String() string            { return proto.CompactTextString(m) }
func (*HandleDownlinkACKResponse) ProtoMessage()               {}
func (*HandleDownlinkACKResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*DataRate)(nil), "as.DataRate")
	proto.RegisterType((*RXInfo)(nil), "as.RXInfo")
	proto.RegisterType((*TXInfo)(nil), "as.TXInfo")
	proto.RegisterType((*HandleUplinkDataRequest)(nil), "as.HandleUplinkDataRequest")
	proto.RegisterType((*HandleProprietaryUplinkRequest)(nil), "as.HandleProprietaryUplinkRequest")
	proto.RegisterType((*HandleProprietaryUplinkResponse)(nil), "as.HandleProprietaryUplinkResponse")
	proto.RegisterType((*HandleUplinkDataResponse)(nil), "as.HandleUplinkDataResponse")
	proto.RegisterType((*HandleErrorRequest)(nil), "as.HandleErrorRequest")
	proto.RegisterType((*HandleErrorResponse)(nil), "as.HandleErrorResponse")
	proto.RegisterType((*HandleDownlinkACKRequest)(nil), "as.HandleDownlinkACKRequest")
	proto.RegisterType((*HandleDownlinkACKResponse)(nil), "as.HandleDownlinkACKResponse")
	proto.RegisterEnum("as.RXWindow", RXWindow_name, RXWindow_value)
	proto.RegisterEnum("as.ErrorType", ErrorType_name, ErrorType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApplicationServer service

type ApplicationServerClient interface {
	// HandleUplinkData publishes data received from an end-device.
	HandleUplinkData(ctx context.Context, in *HandleUplinkDataRequest, opts ...grpc.CallOption) (*HandleUplinkDataResponse, error)
	// HandleProprietaryUplink handles proprietary uplink payloads.
	HandleProprietaryUplink(ctx context.Context, in *HandleProprietaryUplinkRequest, opts ...grpc.CallOption) (*HandleProprietaryUplinkResponse, error)
	// HandleError publishes an error message.
	HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*HandleErrorResponse, error)
	// HandleDownlinkACK sends a downlink ACK or nACK response.
	HandleDownlinkACK(ctx context.Context, in *HandleDownlinkACKRequest, opts ...grpc.CallOption) (*HandleDownlinkACKResponse, error)
}

type applicationServerClient struct {
	cc *grpc.ClientConn
}

func NewApplicationServerClient(cc *grpc.ClientConn) ApplicationServerClient {
	return &applicationServerClient{cc}
}

func (c *applicationServerClient) HandleUplinkData(ctx context.Context, in *HandleUplinkDataRequest, opts ...grpc.CallOption) (*HandleUplinkDataResponse, error) {
	out := new(HandleUplinkDataResponse)
	err := grpc.Invoke(ctx, "/as.ApplicationServer/HandleUplinkData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerClient) HandleProprietaryUplink(ctx context.Context, in *HandleProprietaryUplinkRequest, opts ...grpc.CallOption) (*HandleProprietaryUplinkResponse, error) {
	out := new(HandleProprietaryUplinkResponse)
	err := grpc.Invoke(ctx, "/as.ApplicationServer/HandleProprietaryUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerClient) HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*HandleErrorResponse, error) {
	out := new(HandleErrorResponse)
	err := grpc.Invoke(ctx, "/as.ApplicationServer/HandleError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerClient) HandleDownlinkACK(ctx context.Context, in *HandleDownlinkACKRequest, opts ...grpc.CallOption) (*HandleDownlinkACKResponse, error) {
	out := new(HandleDownlinkACKResponse)
	err := grpc.Invoke(ctx, "/as.ApplicationServer/HandleDownlinkACK", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationServer service

type ApplicationServerServer interface {
	// HandleUplinkData publishes data received from an end-device.
	HandleUplinkData(context.Context, *HandleUplinkDataRequest) (*HandleUplinkDataResponse, error)
	// HandleProprietaryUplink handles proprietary uplink payloads.
	HandleProprietaryUplink(context.Context, *HandleProprietaryUplinkRequest) (*HandleProprietaryUplinkResponse, error)
	// HandleError publishes an error message.
	HandleError(context.Context, *HandleErrorRequest) (*HandleErrorResponse, error)
	// HandleDownlinkACK sends a downlink ACK or nACK response.
	HandleDownlinkACK(context.Context, *HandleDownlinkACKRequest) (*HandleDownlinkACKResponse, error)
}

func RegisterApplicationServerServer(s *grpc.Server, srv ApplicationServerServer) {
	s.RegisterService(&_ApplicationServer_serviceDesc, srv)
}

func _ApplicationServer_HandleUplinkData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleUplinkDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServer).HandleUplinkData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServer/HandleUplinkData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServer).HandleUplinkData(ctx, req.(*HandleUplinkDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServer_HandleProprietaryUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleProprietaryUplinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServer).HandleProprietaryUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServer/HandleProprietaryUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServer).HandleProprietaryUplink(ctx, req.(*HandleProprietaryUplinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServer_HandleError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServer).HandleError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServer/HandleError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServer).HandleError(ctx, req.(*HandleErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServer_HandleDownlinkACK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleDownlinkACKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServer).HandleDownlinkACK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServer/HandleDownlinkACK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServer).HandleDownlinkACK(ctx, req.(*HandleDownlinkACKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "as.ApplicationServer",
	HandlerType: (*ApplicationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUplinkData",
			Handler:    _ApplicationServer_HandleUplinkData_Handler,
		},
		{
			MethodName: "HandleProprietaryUplink",
			Handler:    _ApplicationServer_HandleProprietaryUplink_Handler,
		},
		{
			MethodName: "HandleError",
			Handler:    _ApplicationServer_HandleError_Handler,
		},
		{
			MethodName: "HandleDownlinkACK",
			Handler:    _ApplicationServer_HandleDownlinkACK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "as.proto",
}

func init() { proto.RegisterFile("as.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x76, 0xea, 0x44,
	0x14, 0x6e, 0xf8, 0x0d, 0x1b, 0x8e, 0xe6, 0xcc, 0xd1, 0x9e, 0xc8, 0xc1, 0x63, 0x4f, 0xbc, 0xe9,
	0xea, 0x05, 0x4b, 0xf1, 0x05, 0x44, 0x48, 0x95, 0xe5, 0x6a, 0x8b, 0x03, 0xd8, 0x2e, 0x6f, 0x58,
	0xd3, 0xcc, 0x50, 0x63, 0x43, 0x26, 0x4e, 0x86, 0x56, 0x2e, 0xf4, 0xd2, 0x87, 0xf0, 0x2d, 0x7c,
	0x09, 0x9f, 0xc3, 0x47, 0x71, 0xcd, 0x4c, 0x02, 0xa9, 0x80, 0xf5, 0x6e, 0xef, 0xef, 0xdb, 0xb3,
	0x7f, 0xbe, 0xbd, 0x03, 0x60, 0x93, 0xb4, 0x9b, 0x08, 0x2e, 0x39, 0x2a, 0x91, 0xd4, 0xfb, 0xdd,
	0x02, 0x7b, 0x48, 0x24, 0xc1, 0x44, 0x32, 0xf4, 0x16, 0x60, 0xc9, 0xe9, 0x2a, 0x22, 0x32, 0xe4,
	0xb1, 0x6b, 0x9d, 0x58, 0xa7, 0x0d, 0x5c, 0x40, 0x50, 0x07, 0x1a, 0xb7, 0x24, 0xa6, 0xd7, 0x21,
	0x95, 0x3f, 0xba, 0xa5, 0x13, 0xeb, 0xf4, 0x05, 0xde, 0x02, 0xc8, 0x83, 0x56, 0x9a, 0x08, 0x46,
	0xe8, 0x39, 0x09, 0x24, 0x17, 0x6e, 0x59, 0x07, 0x3c, 0xc1, 0x90, 0x0b, 0xf5, 0xdb, 0x50, 0x0a,
	0x22, 0x99, 0x5b, 0xd1, 0x74, 0xee, 0x7a, 0x7f, 0x59, 0x50, 0xc3, 0x37, 0xa3, 0x78, 0xc1, 0x91,
	0x03, 0xe5, 0x25, 0x09, 0x74, 0xfd, 0x16, 0x56, 0x26, 0x42, 0x50, 0x91, 0xe1, 0x92, 0xe9, 0x9a,
	0x0d, 0xac, 0x6d, 0x85, 0x89, 0x34, 0x0d, 0x75, 0x99, 0x2a, 0xd6, 0xb6, 0x4a, 0x1f, 0x71, 0x4c,
	0x26, 0x97, 0x58, 0xa7, 0xb7, 0x70, 0xee, 0xaa, 0xe8, 0x98, 0x2c, 0x99, 0x5b, 0x35, 0x19, 0x94,
	0x8d, 0xda, 0x60, 0xab, 0xc1, 0xe4, 0x8a, 0x32, 0xb7, 0xa6, 0xc3, 0x37, 0xbe, 0x1a, 0x35, 0xe2,
	0xf1, 0x9d, 0x21, 0xeb, 0x9a, 0xdc, 0x02, 0xea, 0x25, 0x89, 0xb2, 0x97, 0xb6, 0x79, 0x99, 0xfb,
	0xde, 0x6f, 0x50, 0x9b, 0x9a, 0x39, 0x3a, 0xd0, 0x58, 0x08, 0xf6, 0xf3, 0x8a, 0xc5, 0xc1, 0x5a,
	0x4f, 0x53, 0xc6, 0x5b, 0x00, 0x9d, 0x82, 0x4d, 0x33, 0xe1, 0xf5, 0x5c, 0xcd, 0x5e, 0xab, 0x4b,
	0xd2, 0x6e, 0xbe, 0x0c, 0xbc, 0x61, 0x95, 0x1e, 0x84, 0x1a, 0x3d, 0x6d, 0xac, 0x4c, 0x55, 0x3f,
	0xe0, 0x94, 0xe1, 0x5c, 0xc7, 0x06, 0xde, 0xf8, 0xde, 0x9f, 0x25, 0x78, 0xfd, 0x0d, 0x89, 0x69,
	0xc4, 0x66, 0x49, 0x14, 0xc6, 0xf7, 0x3a, 0xa1, 0x2a, 0x9a, 0x4a, 0x74, 0x0c, 0x35, 0xca, 0x1e,
	0xfc, 0xd9, 0x28, 0x13, 0x37, 0xf3, 0x14, 0x4e, 0x92, 0x44, 0xe1, 0x25, 0x83, 0x1b, 0x4f, 0xa9,
	0xb6, 0x18, 0xc4, 0x32, 0x5b, 0xa5, 0xb6, 0xd1, 0x07, 0x50, 0x5d, 0x8c, 0xb9, 0x90, 0xd9, 0x02,
	0x8d, 0xa3, 0x22, 0x55, 0xbf, 0x5a, 0xdf, 0x16, 0xd6, 0x36, 0xf2, 0xa0, 0x26, 0x7f, 0x51, 0x4a,
	0x68, 0x75, 0x9b, 0x3d, 0x50, 0xf3, 0x19, 0x6d, 0x70, 0xc6, 0xa8, 0x18, 0x61, 0x62, 0xea, 0x27,
	0xe5, 0x3c, 0x06, 0x67, 0x31, 0x86, 0x41, 0x9f, 0xc1, 0x2b, 0xca, 0x1e, 0xc2, 0x80, 0x4d, 0x24,
	0x91, 0xab, 0xf4, 0x2b, 0x22, 0x25, 0x13, 0x6b, 0xb7, 0xa1, 0xeb, 0xef, 0xa3, 0x50, 0x17, 0x50,
	0x11, 0xbe, 0x20, 0xe2, 0x2e, 0x8c, 0x5d, 0xd0, 0x97, 0xb2, 0x87, 0xf1, 0xfe, 0xb0, 0xe0, 0xad,
	0xd1, 0x6c, 0x2c, 0x78, 0x22, 0x42, 0x26, 0x89, 0x58, 0x1b, 0xf9, 0x72, 0xe9, 0xd4, 0xb7, 0x41,
	0x82, 0x31, 0x59, 0x47, 0x9c, 0xd0, 0x4c, 0xbe, 0x02, 0xa2, 0x8f, 0x36, 0x0c, 0x32, 0xfd, 0x94,
	0x59, 0x18, 0xbf, 0xfc, 0x3f, 0xc6, 0xaf, 0x1c, 0x1a, 0xdf, 0x7b, 0x07, 0x9f, 0x1c, 0xec, 0x2d,
	0x4d, 0x78, 0x9c, 0x32, 0xaf, 0x0d, 0xee, 0xee, 0xca, 0x33, 0x6e, 0x0d, 0xc8, 0x70, 0xbe, 0x10,
	0x5c, 0x3c, 0x77, 0x09, 0xef, 0xa0, 0x22, 0xd7, 0x09, 0xd3, 0x2d, 0xbf, 0xd7, 0x7b, 0xa1, 0xda,
	0xd1, 0xef, 0xa6, 0xeb, 0x84, 0x61, 0x4d, 0xa9, 0x03, 0x60, 0x0a, 0xca, 0x2e, 0xcf, 0x38, 0x9b,
	0x53, 0xa9, 0x6e, 0x4f, 0xc5, 0xfb, 0x10, 0x5e, 0x3d, 0x29, 0x9d, 0x75, 0xf4, 0x53, 0xde, 0xed,
	0x90, 0x3f, 0xc6, 0xaa, 0xdf, 0xfe, 0xe0, 0xdb, 0xe7, 0xfa, 0xca, 0xd3, 0x97, 0x0a, 0x97, 0xe8,
	0x41, 0x8b, 0x04, 0xf7, 0x31, 0x7f, 0x8c, 0x18, 0xbd, 0x63, 0x34, 0xfb, 0x40, 0x9e, 0x60, 0xde,
	0x1b, 0xf8, 0x68, 0x4f, 0x2d, 0xd3, 0xc8, 0x59, 0x07, 0x6c, 0x7c, 0x73, 0x1d, 0xc6, 0x94, 0x3f,
	0xa2, 0x3a, 0x94, 0xf1, 0xcd, 0xe7, 0xce, 0x91, 0x31, 0x7a, 0x8e, 0x75, 0xf6, 0x2b, 0x34, 0x36,
	0xa3, 0xa3, 0x26, 0xd4, 0xbf, 0x66, 0x31, 0x13, 0x61, 0xe0, 0x1c, 0x21, 0x1b, 0x2a, 0x57, 0xd3,
	0x7e, 0xdf, 0xb1, 0x90, 0x03, 0xad, 0x61, 0x7f, 0xda, 0x9f, 0xcf, 0xc6, 0xf3, 0xf3, 0xc1, 0xe5,
	0xd4, 0x29, 0xa1, 0xf7, 0xa1, 0x99, 0x23, 0x17, 0xa3, 0x81, 0x53, 0x46, 0x6d, 0x38, 0x1e, 0xfa,
	0xdf, 0x8f, 0x06, 0xfe, 0xfc, 0xbb, 0x99, 0x3f, 0xf3, 0xe7, 0xa3, 0xa9, 0x7f, 0x31, 0x9f, 0x8c,
	0x7e, 0xf0, 0x9d, 0xca, 0x7e, 0x4e, 0x27, 0xaa, 0xf6, 0xfe, 0x2e, 0xc1, 0xcb, 0x7e, 0x92, 0x44,
	0x61, 0xa0, 0x7f, 0x7c, 0x27, 0x4c, 0x3c, 0x30, 0x81, 0xae, 0xc0, 0xf9, 0xf7, 0xa6, 0xd1, 0x1b,
	0xb5, 0xa5, 0x03, 0x9f, 0x7c, 0xbb, 0xb3, 0x9f, 0xcc, 0x56, 0x71, 0x84, 0x68, 0xfe, 0x6b, 0xb1,
	0x73, 0x5d, 0xc8, 0xdb, 0x3e, 0x3d, 0xf4, 0x59, 0xb4, 0x3f, 0xfd, 0xcf, 0x98, 0x4d, 0x95, 0x2f,
	0xa1, 0x59, 0xb8, 0x04, 0x74, 0xbc, 0x7d, 0x55, 0xbc, 0xca, 0xf6, 0xeb, 0x1d, 0x7c, 0x93, 0x01,
	0xc3, 0xcb, 0x9d, 0x45, 0xa2, 0xc2, 0x70, 0xbb, 0xb7, 0xd4, 0xfe, 0xf8, 0x00, 0x9b, 0xe7, 0xbc,
	0xad, 0xe9, 0xff, 0xc1, 0x2f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x4a, 0xa7, 0x75, 0x13,
	0x07, 0x00, 0x00,
}
