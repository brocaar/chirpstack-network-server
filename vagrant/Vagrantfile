# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "comiq/dockerbox"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  config.vm.network "forwarded_port", guest: 22, host: 2200, host_ip: "0.0.0.0"
  config.vm.network "forwarded_port", guest: 1700, host: 1700, host_ip: "0.0.0.0", protocol: "udp"
  config.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "0.0.0.0", protocol: "tcp"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

## https://github.com/docker/kitematic/issues/718
## https://github.com/golang/go/wiki/Ubuntu

  config.vm.provision "shell", inline: <<-SHELL

    echo "nameserver 8.8.8.8" > /etc/resolv.conf
    sleep 3
    apt-get update
    apt-get install -y htop git tmux

    wget https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz
    tar -zxvf go1.7.3.linux-amd64.tar.gz -C /usr/local/

    echo 'export GOROOT=/usr/local/go' >> /etc/profile
    echo 'export GOPATH=/go' >> /etc/profile
    echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin' >> /etc/profile
    export GOROOT=/usr/local/go
    export GOPATH=/go
    export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

    go get -d github.com/brocaar/loraserver/...
    go get -d github.com/brocaar/lora-app-server/...
    go get -d github.com/brocaar/lora-gateway-bridge/...

    cd $GOPATH/src/github.com/brocaar/loraserver
    make build
    cd $GOPATH/src/github.com/brocaar/lora-app-server
    make build
    cd $GOPATH/src/github.com/brocaar/lora-gateway-bridge
    make build

    ## generate self-signed certificate
    cd $GOPATH/src/github.com/brocaar/lora-app-server/build
    openssl req -x509 -newkey rsa:4096 -keyout http-key.pem -out http.pem -days 365 -nodes -subj "/CN=example.com"
    cd


    echo "## Start containers"
    BAND=EU_863_870 NET_ID=010203 docker-compose -f /vagrant/docker-compose.yml up -d


    echo "## Done, check logs"
    docker ps -a
    docker logs vagrant_loraserver_1
    docker logs vagrant_lora-app-server_1

  SHELL

end
