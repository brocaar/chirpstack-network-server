// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.13.0
// source: device_session.proto

package storage

import (
	common "github.com/brocaar/chirpstack-api/go/v3/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DeviceSessionPBChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency (Hz).
	Frequency uint32 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Min. data-rate.
	MinDr uint32 `protobuf:"varint,2,opt,name=min_dr,json=minDr,proto3" json:"min_dr,omitempty"`
	// Max. data-rate.
	MaxDr uint32 `protobuf:"varint,3,opt,name=max_dr,json=maxDr,proto3" json:"max_dr,omitempty"`
}

func (x *DeviceSessionPBChannel) Reset() {
	*x = DeviceSessionPBChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionPBChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionPBChannel) ProtoMessage() {}

func (x *DeviceSessionPBChannel) ProtoReflect() protoreflect.Message {
	mi := &file_device_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionPBChannel.ProtoReflect.Descriptor instead.
func (*DeviceSessionPBChannel) Descriptor() ([]byte, []int) {
	return file_device_session_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceSessionPBChannel) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *DeviceSessionPBChannel) GetMinDr() uint32 {
	if x != nil {
		return x.MinDr
	}
	return 0
}

func (x *DeviceSessionPBChannel) GetMaxDr() uint32 {
	if x != nil {
		return x.MaxDr
	}
	return 0
}

type DeviceSessionPBUplinkADRHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uplink frame-counter.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Max SNR (of deduplicated frames received by one or multiple gateways).
	MaxSnr float32 `protobuf:"fixed32,2,opt,name=max_snr,json=maxSnr,proto3" json:"max_snr,omitempty"`
	// TX Power (as known by the network-server).
	TxPowerIndex uint32 `protobuf:"varint,3,opt,name=tx_power_index,json=txPowerIndex,proto3" json:"tx_power_index,omitempty"`
	// Number of receiving gateways.
	GatewayCount uint32 `protobuf:"varint,4,opt,name=gateway_count,json=gatewayCount,proto3" json:"gateway_count,omitempty"`
}

func (x *DeviceSessionPBUplinkADRHistory) Reset() {
	*x = DeviceSessionPBUplinkADRHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_session_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionPBUplinkADRHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionPBUplinkADRHistory) ProtoMessage() {}

func (x *DeviceSessionPBUplinkADRHistory) ProtoReflect() protoreflect.Message {
	mi := &file_device_session_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionPBUplinkADRHistory.ProtoReflect.Descriptor instead.
func (*DeviceSessionPBUplinkADRHistory) Descriptor() ([]byte, []int) {
	return file_device_session_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceSessionPBUplinkADRHistory) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *DeviceSessionPBUplinkADRHistory) GetMaxSnr() float32 {
	if x != nil {
		return x.MaxSnr
	}
	return 0
}

func (x *DeviceSessionPBUplinkADRHistory) GetTxPowerIndex() uint32 {
	if x != nil {
		return x.TxPowerIndex
	}
	return 0
}

func (x *DeviceSessionPBUplinkADRHistory) GetGatewayCount() uint32 {
	if x != nil {
		return x.GatewayCount
	}
	return 0
}

type DeviceSessionPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the device-profile.
	DeviceProfileId string `protobuf:"bytes,1,opt,name=device_profile_id,json=deviceProfileId,proto3" json:"device_profile_id,omitempty"`
	// ID of the service-profile.
	ServiceProfileId string `protobuf:"bytes,2,opt,name=service_profile_id,json=serviceProfileId,proto3" json:"service_profile_id,omitempty"`
	// ID of the routing-profile.
	RoutingProfileId string `protobuf:"bytes,3,opt,name=routing_profile_id,json=routingProfileId,proto3" json:"routing_profile_id,omitempty"`
	// Device address.
	DevAddr []byte `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,5,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Join EUI.
	JoinEui []byte `protobuf:"bytes,6,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// FNwkSIntKey.
	FNwkSIntKey []byte `protobuf:"bytes,7,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// SNwkSIntKey.
	SNwkSIntKey []byte `protobuf:"bytes,8,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key,omitempty"`
	// NwkSEncKey.
	NwkSEncKey []byte `protobuf:"bytes,9,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	// AppSKeyEnvelope contains the (encrypted) AppSKey key-envelope.
	AppSKeyEnvelope *common.KeyEnvelope `protobuf:"bytes,45,opt,name=app_s_key_envelope,json=appSKeyEnvelope,proto3" json:"app_s_key_envelope,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,10,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// Downlink frame-counter (network-server).
	NFCntDown uint32 `protobuf:"varint,11,opt,name=n_f_cnt_down,json=nFCntDown,proto3" json:"n_f_cnt_down,omitempty"`
	// Uplink frame-counter (application-server).
	// Note: this frame-counter is managed by the application-server.
	AFCntDown uint32 `protobuf:"varint,12,opt,name=a_f_cnt_down,json=aFCntDown,proto3" json:"a_f_cnt_down,omitempty"`
	// Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or a_f_cnt_down).
	ConfFCnt uint32 `protobuf:"varint,39,opt,name=conf_f_cnt,json=confFCnt,proto3" json:"conf_f_cnt,omitempty"`
	// Skip uplink frame-counter validation.
	SkipFCntCheck bool `protobuf:"varint,13,opt,name=skip_f_cnt_check,json=skipFCntCheck,proto3" json:"skip_f_cnt_check,omitempty"`
	// RX Delay.
	RxDelay uint32 `protobuf:"varint,14,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	// RX1 data-rate offset.
	Rx1DrOffset uint32 `protobuf:"varint,15,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	// RX2 data-rate.
	Rx2Dr uint32 `protobuf:"varint,16,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	// RX2 frequency.
	Rx2Frequency uint32 `protobuf:"varint,17,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	// TXPowerIndex which the node is using. The possible values are defined
	// by the lorawan/band package and are region specific. By default it is
	// assumed that the node is using TXPower 0. This value is controlled by
	// the ADR engine.
	TxPowerIndex uint32 `protobuf:"varint,18,opt,name=tx_power_index,json=txPowerIndex,proto3" json:"tx_power_index,omitempty"`
	// DR defines the (last known) data-rate at which the node is operating.
	// This value is controlled by the ADR engine.
	Dr uint32 `protobuf:"varint,19,opt,name=dr,proto3" json:"dr,omitempty"`
	// ADR defines if the device has ADR enabled.
	Adr bool `protobuf:"varint,20,opt,name=adr,proto3" json:"adr,omitempty"`
	// MaxSupportedTXPowerIndex defines the maximum supported tx-power index
	// by the node, or 0 when not set.
	MaxSupportedTxPowerIndex uint32 `protobuf:"varint,21,opt,name=max_supported_tx_power_index,json=maxSupportedTxPowerIndex,proto3" json:"max_supported_tx_power_index,omitempty"`
	// NbTrans defines the number of transmissions for each unconfirmed uplink
	// frame. In case of 0, the default value is used.
	// This value is controlled by the ADR engine.
	NbTrans uint32 `protobuf:"varint,23,opt,name=nb_trans,json=nbTrans,proto3" json:"nb_trans,omitempty"`
	// Channels that are activated on the device.
	EnabledUplinkChannels []uint32 `protobuf:"varint,24,rep,packed,name=enabled_uplink_channels,json=enabledUplinkChannels,proto3" json:"enabled_uplink_channels,omitempty"`
	// Extra uplink channels, configured by the user.
	ExtraUplinkChannels map[uint32]*DeviceSessionPBChannel `protobuf:"bytes,25,rep,name=extra_uplink_channels,json=extraUplinkChannels,proto3" json:"extra_uplink_channels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Frequency of each channel.
	ChannelFrequencies []uint32 `protobuf:"varint,26,rep,packed,name=channel_frequencies,json=channelFrequencies,proto3" json:"channel_frequencies,omitempty"`
	// Uplink history for ADR (last 20 uplink transmissions).
	UplinkAdrHistory []*DeviceSessionPBUplinkADRHistory `protobuf:"bytes,27,rep,name=uplink_adr_history,json=uplinkAdrHistory,proto3" json:"uplink_adr_history,omitempty"`
	// Last device-status requested timestamp (Unix ns)
	LastDeviceStatusRequestTimeUnixNs int64 `protobuf:"varint,29,opt,name=last_device_status_request_time_unix_ns,json=lastDeviceStatusRequestTimeUnixNs,proto3" json:"last_device_status_request_time_unix_ns,omitempty"`
	// Last downlink timestamp (Unix ns).
	LastDownlinkTxTimestampUnixNs int64 `protobuf:"varint,32,opt,name=last_downlink_tx_timestamp_unix_ns,json=lastDownlinkTxTimestampUnixNs,proto3" json:"last_downlink_tx_timestamp_unix_ns,omitempty"`
	// Class-B beacon is locked.
	BeaconLocked bool `protobuf:"varint,33,opt,name=beacon_locked,json=beaconLocked,proto3" json:"beacon_locked,omitempty"`
	// Class-B ping-slot nb.
	PingSlotNb uint32 `protobuf:"varint,34,opt,name=ping_slot_nb,json=pingSlotNb,proto3" json:"ping_slot_nb,omitempty"`
	// Class-B ping-slot data-rate.
	PingSlotDr uint32 `protobuf:"varint,35,opt,name=ping_slot_dr,json=pingSlotDr,proto3" json:"ping_slot_dr,omitempty"`
	// Class-B ping-slot tx frequency.
	PingSlotFrequency uint32 `protobuf:"varint,36,opt,name=ping_slot_frequency,json=pingSlotFrequency,proto3" json:"ping_slot_frequency,omitempty"`
	// LoRaWAN mac-version.
	MacVersion string `protobuf:"bytes,37,opt,name=mac_version,json=macVersion,proto3" json:"mac_version,omitempty"`
	// MinSupportedTXPowerIndex defines the minimum supported tx-power index
	// by the node (default 0).
	MinSupportedTxPowerIndex uint32 `protobuf:"varint,38,opt,name=min_supported_tx_power_index,json=minSupportedTxPowerIndex,proto3" json:"min_supported_tx_power_index,omitempty"`
	// RejoinRequestEnabled defines if the rejoin-request is enabled on the
	// device.
	RejoinRequestEnabled bool `protobuf:"varint,44,opt,name=rejoin_request_enabled,json=rejoinRequestEnabled,proto3" json:"rejoin_request_enabled,omitempty"`
	// RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
	// the rejoin-request.
	RejoinRequestMaxCountN uint32 `protobuf:"varint,40,opt,name=rejoin_request_max_count_n,json=rejoinRequestMaxCountN,proto3" json:"rejoin_request_max_count_n,omitempty"`
	// RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
	// for the rejoin-request.
	RejoinRequestMaxTimeN uint32 `protobuf:"varint,41,opt,name=rejoin_request_max_time_n,json=rejoinRequestMaxTimeN,proto3" json:"rejoin_request_max_time_n,omitempty"`
	// Rejoin counter (RJCount0).
	// This counter is reset to 0 after each successful join-accept.
	RejoinCount_0 uint32 `protobuf:"varint,42,opt,name=rejoin_count_0,json=rejoinCount0,proto3" json:"rejoin_count_0,omitempty"`
	// Pending rejoin device-session contains a device-session which has not
	// yet been activated by the device (by sending a first uplink).
	PendingRejoinDeviceSession []byte `protobuf:"bytes,43,opt,name=pending_rejoin_device_session,json=pendingRejoinDeviceSession,proto3" json:"pending_rejoin_device_session,omitempty"`
	// Device reference altitude for geolocation.
	ReferenceAltitude float64 `protobuf:"fixed64,46,opt,name=reference_altitude,json=referenceAltitude,proto3" json:"reference_altitude,omitempty"`
	// UplinkDwellTime.
	UplinkDwellTime_400Ms bool `protobuf:"varint,47,opt,name=uplink_dwell_time_400ms,json=uplinkDwellTime400ms,proto3" json:"uplink_dwell_time_400ms,omitempty"`
	// DownlinkDwellTime.
	DownlinkDwellTime_400Ms bool `protobuf:"varint,48,opt,name=downlink_dwell_time_400ms,json=downlinkDwellTime400ms,proto3" json:"downlink_dwell_time_400ms,omitempty"`
	// Uplink max. EIRP index.
	UplinkMaxEirpIndex uint32 `protobuf:"varint,49,opt,name=uplink_max_eirp_index,json=uplinkMaxEirpIndex,proto3" json:"uplink_max_eirp_index,omitempty"`
	// Mac-command error counter.
	MacCommandErrorCount map[uint32]uint32 `protobuf:"bytes,50,rep,name=mac_command_error_count,json=macCommandErrorCount,proto3" json:"mac_command_error_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Device is disabled.
	IsDisabled bool `protobuf:"varint,51,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
}

func (x *DeviceSessionPB) Reset() {
	*x = DeviceSessionPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_session_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionPB) ProtoMessage() {}

func (x *DeviceSessionPB) ProtoReflect() protoreflect.Message {
	mi := &file_device_session_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionPB.ProtoReflect.Descriptor instead.
func (*DeviceSessionPB) Descriptor() ([]byte, []int) {
	return file_device_session_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceSessionPB) GetDeviceProfileId() string {
	if x != nil {
		return x.DeviceProfileId
	}
	return ""
}

func (x *DeviceSessionPB) GetServiceProfileId() string {
	if x != nil {
		return x.ServiceProfileId
	}
	return ""
}

func (x *DeviceSessionPB) GetRoutingProfileId() string {
	if x != nil {
		return x.RoutingProfileId
	}
	return ""
}

func (x *DeviceSessionPB) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *DeviceSessionPB) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *DeviceSessionPB) GetJoinEui() []byte {
	if x != nil {
		return x.JoinEui
	}
	return nil
}

func (x *DeviceSessionPB) GetFNwkSIntKey() []byte {
	if x != nil {
		return x.FNwkSIntKey
	}
	return nil
}

func (x *DeviceSessionPB) GetSNwkSIntKey() []byte {
	if x != nil {
		return x.SNwkSIntKey
	}
	return nil
}

func (x *DeviceSessionPB) GetNwkSEncKey() []byte {
	if x != nil {
		return x.NwkSEncKey
	}
	return nil
}

func (x *DeviceSessionPB) GetAppSKeyEnvelope() *common.KeyEnvelope {
	if x != nil {
		return x.AppSKeyEnvelope
	}
	return nil
}

func (x *DeviceSessionPB) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *DeviceSessionPB) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *DeviceSessionPB) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

func (x *DeviceSessionPB) GetConfFCnt() uint32 {
	if x != nil {
		return x.ConfFCnt
	}
	return 0
}

func (x *DeviceSessionPB) GetSkipFCntCheck() bool {
	if x != nil {
		return x.SkipFCntCheck
	}
	return false
}

func (x *DeviceSessionPB) GetRxDelay() uint32 {
	if x != nil {
		return x.RxDelay
	}
	return 0
}

func (x *DeviceSessionPB) GetRx1DrOffset() uint32 {
	if x != nil {
		return x.Rx1DrOffset
	}
	return 0
}

func (x *DeviceSessionPB) GetRx2Dr() uint32 {
	if x != nil {
		return x.Rx2Dr
	}
	return 0
}

func (x *DeviceSessionPB) GetRx2Frequency() uint32 {
	if x != nil {
		return x.Rx2Frequency
	}
	return 0
}

func (x *DeviceSessionPB) GetTxPowerIndex() uint32 {
	if x != nil {
		return x.TxPowerIndex
	}
	return 0
}

func (x *DeviceSessionPB) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

func (x *DeviceSessionPB) GetAdr() bool {
	if x != nil {
		return x.Adr
	}
	return false
}

func (x *DeviceSessionPB) GetMaxSupportedTxPowerIndex() uint32 {
	if x != nil {
		return x.MaxSupportedTxPowerIndex
	}
	return 0
}

func (x *DeviceSessionPB) GetNbTrans() uint32 {
	if x != nil {
		return x.NbTrans
	}
	return 0
}

func (x *DeviceSessionPB) GetEnabledUplinkChannels() []uint32 {
	if x != nil {
		return x.EnabledUplinkChannels
	}
	return nil
}

func (x *DeviceSessionPB) GetExtraUplinkChannels() map[uint32]*DeviceSessionPBChannel {
	if x != nil {
		return x.ExtraUplinkChannels
	}
	return nil
}

func (x *DeviceSessionPB) GetChannelFrequencies() []uint32 {
	if x != nil {
		return x.ChannelFrequencies
	}
	return nil
}

func (x *DeviceSessionPB) GetUplinkAdrHistory() []*DeviceSessionPBUplinkADRHistory {
	if x != nil {
		return x.UplinkAdrHistory
	}
	return nil
}

func (x *DeviceSessionPB) GetLastDeviceStatusRequestTimeUnixNs() int64 {
	if x != nil {
		return x.LastDeviceStatusRequestTimeUnixNs
	}
	return 0
}

func (x *DeviceSessionPB) GetLastDownlinkTxTimestampUnixNs() int64 {
	if x != nil {
		return x.LastDownlinkTxTimestampUnixNs
	}
	return 0
}

func (x *DeviceSessionPB) GetBeaconLocked() bool {
	if x != nil {
		return x.BeaconLocked
	}
	return false
}

func (x *DeviceSessionPB) GetPingSlotNb() uint32 {
	if x != nil {
		return x.PingSlotNb
	}
	return 0
}

func (x *DeviceSessionPB) GetPingSlotDr() uint32 {
	if x != nil {
		return x.PingSlotDr
	}
	return 0
}

func (x *DeviceSessionPB) GetPingSlotFrequency() uint32 {
	if x != nil {
		return x.PingSlotFrequency
	}
	return 0
}

func (x *DeviceSessionPB) GetMacVersion() string {
	if x != nil {
		return x.MacVersion
	}
	return ""
}

func (x *DeviceSessionPB) GetMinSupportedTxPowerIndex() uint32 {
	if x != nil {
		return x.MinSupportedTxPowerIndex
	}
	return 0
}

func (x *DeviceSessionPB) GetRejoinRequestEnabled() bool {
	if x != nil {
		return x.RejoinRequestEnabled
	}
	return false
}

func (x *DeviceSessionPB) GetRejoinRequestMaxCountN() uint32 {
	if x != nil {
		return x.RejoinRequestMaxCountN
	}
	return 0
}

func (x *DeviceSessionPB) GetRejoinRequestMaxTimeN() uint32 {
	if x != nil {
		return x.RejoinRequestMaxTimeN
	}
	return 0
}

func (x *DeviceSessionPB) GetRejoinCount_0() uint32 {
	if x != nil {
		return x.RejoinCount_0
	}
	return 0
}

func (x *DeviceSessionPB) GetPendingRejoinDeviceSession() []byte {
	if x != nil {
		return x.PendingRejoinDeviceSession
	}
	return nil
}

func (x *DeviceSessionPB) GetReferenceAltitude() float64 {
	if x != nil {
		return x.ReferenceAltitude
	}
	return 0
}

func (x *DeviceSessionPB) GetUplinkDwellTime_400Ms() bool {
	if x != nil {
		return x.UplinkDwellTime_400Ms
	}
	return false
}

func (x *DeviceSessionPB) GetDownlinkDwellTime_400Ms() bool {
	if x != nil {
		return x.DownlinkDwellTime_400Ms
	}
	return false
}

func (x *DeviceSessionPB) GetUplinkMaxEirpIndex() uint32 {
	if x != nil {
		return x.UplinkMaxEirpIndex
	}
	return 0
}

func (x *DeviceSessionPB) GetMacCommandErrorCount() map[uint32]uint32 {
	if x != nil {
		return x.MacCommandErrorCount
	}
	return nil
}

func (x *DeviceSessionPB) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

type DeviceGatewayRXInfoSetPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,2,opt,name=dr,proto3" json:"dr,omitempty"`
	// Items contains set items.
	Items []*DeviceGatewayRXInfoPB `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DeviceGatewayRXInfoSetPB) Reset() {
	*x = DeviceGatewayRXInfoSetPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_session_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayRXInfoSetPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayRXInfoSetPB) ProtoMessage() {}

func (x *DeviceGatewayRXInfoSetPB) ProtoReflect() protoreflect.Message {
	mi := &file_device_session_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayRXInfoSetPB.ProtoReflect.Descriptor instead.
func (*DeviceGatewayRXInfoSetPB) Descriptor() ([]byte, []int) {
	return file_device_session_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceGatewayRXInfoSetPB) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *DeviceGatewayRXInfoSetPB) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

func (x *DeviceGatewayRXInfoSetPB) GetItems() []*DeviceGatewayRXInfoPB {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeviceGatewayRXInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID.
	GatewayId []byte `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// RSSI.
	Rssi int32 `protobuf:"varint,2,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// LoRa SNR.
	LoraSnr float64 `protobuf:"fixed64,3,opt,name=lora_snr,json=loraSnr,proto3" json:"lora_snr,omitempty"`
	// Board.
	Board uint32 `protobuf:"varint,4,opt,name=board,proto3" json:"board,omitempty"`
	// Antenna.
	Antenna uint32 `protobuf:"varint,5,opt,name=antenna,proto3" json:"antenna,omitempty"`
	// Gateway specific context.
	Context []byte `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *DeviceGatewayRXInfoPB) Reset() {
	*x = DeviceGatewayRXInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_session_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayRXInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayRXInfoPB) ProtoMessage() {}

func (x *DeviceGatewayRXInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_device_session_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayRXInfoPB.ProtoReflect.Descriptor instead.
func (*DeviceGatewayRXInfoPB) Descriptor() ([]byte, []int) {
	return file_device_session_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceGatewayRXInfoPB) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *DeviceGatewayRXInfoPB) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *DeviceGatewayRXInfoPB) GetLoraSnr() float64 {
	if x != nil {
		return x.LoraSnr
	}
	return 0
}

func (x *DeviceGatewayRXInfoPB) GetBoard() uint32 {
	if x != nil {
		return x.Board
	}
	return 0
}

func (x *DeviceGatewayRXInfoPB) GetAntenna() uint32 {
	if x != nil {
		return x.Antenna
	}
	return 0
}

func (x *DeviceGatewayRXInfoPB) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

type PassiveRoamingDeviceSessionPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session ID (UUID).
	// Unfortunately we can not use the DevEUI as unique identifier
	// as the PRStartAns DevEUI field is optional.
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// NetID of the hNS.
	NetId []byte `protobuf:"bytes,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// DevAddr of the device.
	DevAddr []byte `protobuf:"bytes,3,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// DevEUI of the device (optional).
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// LoRaWAN 1.1 frame.
	Lorawan_1_1 bool `protobuf:"varint,5,opt,name=lorawan_1_1,json=lorawan11,proto3" json:"lorawan_1_1,omitempty"`
	// LoRaWAN 1.0 NwkSKey / LoRaWAN 1.1 FNwkSIntKey.
	FNwkSIntKey []byte `protobuf:"bytes,6,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// Lifetime.
	Lifetime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,8,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// Validate MIC.
	ValidateMic bool `protobuf:"varint,9,opt,name=validate_mic,json=validateMic,proto3" json:"validate_mic,omitempty"`
}

func (x *PassiveRoamingDeviceSessionPB) Reset() {
	*x = PassiveRoamingDeviceSessionPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_session_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveRoamingDeviceSessionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveRoamingDeviceSessionPB) ProtoMessage() {}

func (x *PassiveRoamingDeviceSessionPB) ProtoReflect() protoreflect.Message {
	mi := &file_device_session_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveRoamingDeviceSessionPB.ProtoReflect.Descriptor instead.
func (*PassiveRoamingDeviceSessionPB) Descriptor() ([]byte, []int) {
	return file_device_session_proto_rawDescGZIP(), []int{5}
}

func (x *PassiveRoamingDeviceSessionPB) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *PassiveRoamingDeviceSessionPB) GetNetId() []byte {
	if x != nil {
		return x.NetId
	}
	return nil
}

func (x *PassiveRoamingDeviceSessionPB) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *PassiveRoamingDeviceSessionPB) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *PassiveRoamingDeviceSessionPB) GetLorawan_1_1() bool {
	if x != nil {
		return x.Lorawan_1_1
	}
	return false
}

func (x *PassiveRoamingDeviceSessionPB) GetFNwkSIntKey() []byte {
	if x != nil {
		return x.FNwkSIntKey
	}
	return nil
}

func (x *PassiveRoamingDeviceSessionPB) GetLifetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *PassiveRoamingDeviceSessionPB) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *PassiveRoamingDeviceSessionPB) GetValidateMic() bool {
	if x != nil {
		return x.ValidateMic
	}
	return false
}

var File_device_session_proto protoreflect.FileDescriptor

var file_device_session_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x44, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x1f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x55,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x44, 0x52, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x66, 0x43, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6e, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x6e, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x12, 0x0a, 0x0f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x65, 0x75, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e,
	0x45, 0x75, 0x69, 0x12, 0x24, 0x0a, 0x0f, 0x66, 0x5f, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x4e,
	0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0f, 0x73, 0x5f, 0x6e,
	0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x73, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x0d, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x77, 0x6b, 0x53, 0x45, 0x6e, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x53, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x1f,
	0x0a, 0x0c, 0x6e, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x1f, 0x0a, 0x0c, 0x61, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x46, 0x43, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x43,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x78, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x72, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x78, 0x31, 0x44, 0x72,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x32, 0x5f, 0x64, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x32, 0x44, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x78, 0x32, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x78, 0x32, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x78,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x62,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x62,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x65, 0x0a,
	0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x61, 0x64, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x41, 0x44, 0x52, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x41, 0x64, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a,
	0x27, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21,
	0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e,
	0x73, 0x12, 0x49, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e,
	0x62, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x4e, 0x62, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x64, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x6c, 0x6f, 0x74, 0x44, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x69,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a,
	0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x6a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x30, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x1a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x34, 0x30, 0x30, 0x6d, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x34, 0x30, 0x30, 0x6d,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x77,
	0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x6d, 0x73, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x77,
	0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x34, 0x30, 0x30, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x69, 0x72, 0x70, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x45, 0x69, 0x72, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x69, 0x0a, 0x17, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x2e, 0x4d, 0x61, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x67, 0x0a, 0x18, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x42, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a,
	0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x58,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x50, 0x42, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45,
	0x75, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x64, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x73, 0x6e,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x72, 0x61, 0x53, 0x6e, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc4, 0x02, 0x0a, 0x1d, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61,
	0x6e, 0x5f, 0x31, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x72,
	0x61, 0x77, 0x61, 0x6e, 0x31, 0x31, 0x12, 0x24, 0x0a, 0x0f, 0x66, 0x5f, 0x6e, 0x77, 0x6b, 0x5f,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x66, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x08,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_session_proto_rawDescOnce sync.Once
	file_device_session_proto_rawDescData = file_device_session_proto_rawDesc
)

func file_device_session_proto_rawDescGZIP() []byte {
	file_device_session_proto_rawDescOnce.Do(func() {
		file_device_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_session_proto_rawDescData)
	})
	return file_device_session_proto_rawDescData
}

var file_device_session_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_device_session_proto_goTypes = []interface{}{
	(*DeviceSessionPBChannel)(nil),          // 0: storage.DeviceSessionPBChannel
	(*DeviceSessionPBUplinkADRHistory)(nil), // 1: storage.DeviceSessionPBUplinkADRHistory
	(*DeviceSessionPB)(nil),                 // 2: storage.DeviceSessionPB
	(*DeviceGatewayRXInfoSetPB)(nil),        // 3: storage.DeviceGatewayRXInfoSetPB
	(*DeviceGatewayRXInfoPB)(nil),           // 4: storage.DeviceGatewayRXInfoPB
	(*PassiveRoamingDeviceSessionPB)(nil),   // 5: storage.PassiveRoamingDeviceSessionPB
	nil,                                     // 6: storage.DeviceSessionPB.ExtraUplinkChannelsEntry
	nil,                                     // 7: storage.DeviceSessionPB.MacCommandErrorCountEntry
	(*common.KeyEnvelope)(nil),              // 8: common.KeyEnvelope
	(*timestamppb.Timestamp)(nil),           // 9: google.protobuf.Timestamp
}
var file_device_session_proto_depIdxs = []int32{
	8, // 0: storage.DeviceSessionPB.app_s_key_envelope:type_name -> common.KeyEnvelope
	6, // 1: storage.DeviceSessionPB.extra_uplink_channels:type_name -> storage.DeviceSessionPB.ExtraUplinkChannelsEntry
	1, // 2: storage.DeviceSessionPB.uplink_adr_history:type_name -> storage.DeviceSessionPBUplinkADRHistory
	7, // 3: storage.DeviceSessionPB.mac_command_error_count:type_name -> storage.DeviceSessionPB.MacCommandErrorCountEntry
	4, // 4: storage.DeviceGatewayRXInfoSetPB.items:type_name -> storage.DeviceGatewayRXInfoPB
	9, // 5: storage.PassiveRoamingDeviceSessionPB.lifetime:type_name -> google.protobuf.Timestamp
	0, // 6: storage.DeviceSessionPB.ExtraUplinkChannelsEntry.value:type_name -> storage.DeviceSessionPBChannel
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_device_session_proto_init() }
func file_device_session_proto_init() {
	if File_device_session_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_session_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionPBChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_session_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionPBUplinkADRHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_session_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_session_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayRXInfoSetPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_session_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayRXInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_session_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveRoamingDeviceSessionPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_session_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_session_proto_goTypes,
		DependencyIndexes: file_device_session_proto_depIdxs,
		MessageInfos:      file_device_session_proto_msgTypes,
	}.Build()
	File_device_session_proto = out.File
	file_device_session_proto_rawDesc = nil
	file_device_session_proto_goTypes = nil
	file_device_session_proto_depIdxs = nil
}
